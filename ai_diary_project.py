# -*- coding: utf-8 -*-
"""AI Diary Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ClCFTxvzil45FN7kc8kpmIF7OdiHV7II
"""

import time
import requests
import json
from PIL import Image
from io import BytesIO
import matplotlib.pyplot as plt

# 先买了一个9刀的API Basic plan
leonardo_api_key = "9a661d58-49a6-499b-bb3c-8449d8f29262"
authorization = "Bearer %s" % leonardo_api_key

# Helper Function: make output json response more readable
def formatJsonResponse(response):
  response_dict = json.loads(response.text) # 将json字符串转换为字典
  formatted_response = json.dumps(response_dict, indent=4) # 使用 json.dumps() 格式化输出
  return formatted_response

# Test API key
url = "https://cloud.leonardo.ai/api/rest/v1/me"
headers = {
    "accept": "application/json",
    "authorization": authorization
}
response = requests.get(url, headers=headers)
formatted_response = formatJsonResponse(response)
print(formatted_response)

# Helper Function: make output json response more readable
def formatJson(response):
  response_dict = json.loads(response.text) # 将json字符串转换为字典
  formatted_response = json.dumps(response_dict, indent=4) # 使用 json.dumps() 格式化输出
  return formatted_response

# Function: Generate an Image
def generate(prompt, num_images):
    url = "https://cloud.leonardo.ai/api/rest/v1/generations"

    payload = {
        "alchemy": True,
        "height": 768,
        "modelId": "b24e16ff-06e3-43eb-8d33-4416c2d75876",
        "num_images": num_images,
        "presetStyle": "DYNAMIC",
        "prompt": prompt,
        "width": 1024
    }
    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "authorization": authorization
    }

    # Send POST request to generate images
    response = requests.post(url, json=payload, headers=headers)
    print(response.text)  # Check the response for debugging

    # Convert response to dictionary
    response_dict = json.loads(response.text)

    # Extract generationId
    generation_id = response_dict.get("sdGenerationJob", {}).get("generationId")

    return generation_id

# Function to retrieve generated image IDs without displaying them
def get_generated_image_ids(generation_id):
    url = f"https://cloud.leonardo.ai/api/rest/v1/generations/{generation_id}"

    headers = {
        "accept": "application/json",
        "authorization": authorization  # Ensure the authorization token is valid
    }

    # Fetch the generated images
    response = requests.get(url, headers=headers)
    response_dict = response.json()

    # Get the generated image IDs
    generated_images = response_dict.get('generations_by_pk', {}).get('generated_images', [])
    image_ids = []

    for image_data in generated_images:
        image_id = image_data['id']
        image_ids.append(image_id)

    return image_ids  # Return all image IDs

# Function: Display Images
def display_images(generation_id):
    url = f"https://cloud.leonardo.ai/api/rest/v1/generations/{generation_id}"

    headers = {
        "accept": "application/json",
        "authorization": authorization
    }

    # Poll for image generation completion
    while True:
        response = requests.get(url, headers=headers)
        response_dict = json.loads(response.text)

        status = response_dict.get('generations_by_pk', {}).get('status', '')
        if status == "COMPLETE":
            break
        elif status == "FAILED":
            print(f"Image generation failed for ID: {generation_id}")
            return
        time.sleep(5)  # Wait before checking again

    # Get generated images and display them
    generated_images = response_dict.get('generations_by_pk', {}).get('generated_images', [])
    for i, image_data in enumerate(generated_images):
        image_url = image_data['url']
        image_id = image_data['id']
        print(f"Image {i+1}, id={image_id}, URL: {image_url}")

        # Fetch and display the image
        image_response = requests.get(image_url)
        img = Image.open(BytesIO(image_response.content))

        # Display image using matplotlib
        plt.imshow(img)
        plt.axis('off')  # Hide axes
        plt.show()

# Function: Generate an image based on an image
def generate_with_image_id(image_id, prompt, num_images):

    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "authorization": authorization
    }

    # Generate with an image prompt: use Character Reference to control consistency
    url = "https://cloud.leonardo.ai/api/rest/v1/generations"

    payload = {
        "alchemy": True,
        "height": 768,
        "modelId": "b24e16ff-06e3-43eb-8d33-4416c2d75876",
        "num_images": num_images,
        "presetStyle": "DYNAMIC",
        "prompt": prompt,
        "width": 1024,
        "controlnets": [
              {
                  "initImageId": image_id,
                  "initImageType": "GENERATED",
                  "preprocessorId": 67, #Style Reference Id
                  "strengthType": "High",
              }
          ]
    }

    response = requests.post(url, json=payload, headers=headers)

    # Print response for debugging
    print(f"Status code: {response.status_code}")
    print(f"Response: {response.text}")

    # Get the generation of images
    generation_id = response.json()['sdGenerationJob']['generationId']
    return generation_id

# Function to check the status of the generation until it is complete
def wait_for_image_generation(generation_id):
    url = f"https://cloud.leonardo.ai/api/rest/v1/generations/{generation_id}"
    headers = {
        "accept": "application/json",
        "authorization": authorization
    }

    # Poll the status every 5 seconds
    while True:
        response = requests.get(url, headers=headers)
        response_dict = response.json()
        status = response_dict.get('generations_by_pk', {}).get('status', 'PENDING')

        print(f"Current status for generation {generation_id}: {status}")

        if status == "COMPLETE":
            return response_dict
        elif status == "FAILED":
            print(f"Generation {generation_id} failed.")
            return None

        time.sleep(5)  # Wait before checking the status again

# Function to upload a generated image into a dataset
def upload_image_to_dataset(dataset_id, generated_image_id):
    # Define the URL, dynamically inserting the dataset_id
    url = f"https://cloud.leonardo.ai/api/rest/v1/datasets/{dataset_id}/upload/gen"

    # Define the payload with the generated image ID
    payload = {
        "generatedImageId": generated_image_id
    }

    # Define the headers, make sure to include authorization if required
    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "authorization": authorization  # Ensure the authorization token is valid
    }

    # Make the POST request to upload the image
    response = requests.post(url, json=payload, headers=headers)

    # Print and return the response (as a dictionary)
    print(response.text)  # For debugging
    return response.json()

"""
Function to get the number of images in a dataset.
"""
def get_number_of_images_in_dataset(dataset_id):

    # Define the URL, dynamically inserting the dataset_id
    url = f"https://cloud.leonardo.ai/api/rest/v1/datasets/{dataset_id}"

    # Define the headers, make sure to include authorization if required
    headers = {
    "accept": "application/json",
    "content-type": "application/json",
    "authorization": authorization
    }

    # Make the GET request to retrieve the dataset
    response = requests.get(url, headers=headers)

    # Check if the request was successful
    if response.status_code == 200:
        response_data = response.json()
        dataset = response_data.get('datasets_by_pk')

        if dataset and dataset.get('dataset_images'):
            # Count the number of images in the 'dataset_images' array
            number_of_images = len(dataset['dataset_images'])
            print(f"Number of images in the dataset: {number_of_images}")
            return number_of_images
        else:
            print("No images found in the dataset.")
            return 0
    else:
        print(f"Failed to retrieve dataset. Status code: {response.status_code}")
        return 0

# Example usage:
dataset_id = "your-dataset-id"

# Call the function
num_images = get_number_of_images_in_dataset(dataset_id)

# Print the number of images
print(f"Total images in dataset {dataset_id}: {num_images}")

# Function to display all images in a dataset
def display_all_images_in_dataset(dataset_id):
    # Define the URL to fetch the dataset by ID
    url = f"https://cloud.leonardo.ai/api/rest/v1/datasets/{dataset_id}"

    headers = {
        "accept": "application/json",
        "authorization": authorization  # Ensure the authorization token is valid
    }

    # Fetch the dataset details, including images
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        dataset_info = response.json().get('datasets_by_pk', {})

        # Get the images from the dataset
        dataset_images = dataset_info.get('dataset_images', [])

        if not dataset_images:
            print(f"No images found in dataset {dataset_id}.")
            return

        print(f"Displaying {len(dataset_images)} images from dataset {dataset_id}:")

        # Iterate over each image in the dataset
        for i, image_data in enumerate(dataset_images):
            image_url = image_data['url']
            image_id = image_data['id']
            print(f"Image {i+1}, id={image_id}, URL: {image_url}")

            # Fetch and display the image
            image_response = requests.get(image_url)
            img = Image.open(BytesIO(image_response.content))

            # Display image using matplotlib
            plt.imshow(img)
            plt.axis('off')  # Hide axes
            plt.show()
    else:
        print(f"Failed to retrieve dataset {dataset_id}. Status code: {response.status_code}")
        print(response.text)

describe_user = "8-year-old Asian girl with black hair, pigtail hairstyle, very pretty, cute"
prompt = "Highly detailed 3D Disney Pixar-style animation of a %s. Disney, Pixar art style, CGI, clean background, high details, 3d animation."  % describe_user
user_avatar_generation_id = generate(prompt, 4)

display_images(user_avatar_generation_id)

# Function to create a dataset for the user based on user selected avatar picture
def create_user_dataset(dataset_name, seed_image_id, describe_user):

  dataset_id = create_dataset(dataset_name)

  # default activities
  activities = [
    "playing basketball", "riding a bicycle", "reading a book",
    "playing the piano", "cooking in the kitchen", "flying a kite",
    "playing tennis", "swimming in a pool", "watering flowers"
  ]

  # Create and upload images for each activity
  for activity in activities:
      prompt = f"Highly detailed 3D Disney Pixar-style animation of a {describe_user}, {activity}. Disney, Pixar art style, CGI, high details, 3d animation."
      print(f"Generating image for activity: {activity}")

      # Generate image ID for the current activity
      generation_id = generate_with_image_id(seed_image_id, prompt, 1)

      if generation_id:
          generation_response = wait_for_image_generation(generation_id)

          if generation_response:
              image_ids = get_generated_image_ids(generation_id)

              for image_id in image_ids:
                  upload_image_to_dataset(dataset_id, image_id)

              num_images = get_number_of_images_in_dataset(dataset_id)
              print(f"Total images in dataset {dataset_id}: {num_images}")
          else:
              print(f"Failed to generate image for activity: {activity}")
      else:
          print(f"Failed to generate image for activity: {activity}")

  return dataset_id


# Function to create a dataset for storing training images
def create_dataset(name):
    url = "https://cloud.leonardo.ai/api/rest/v1/datasets"

    # Define headers (authorization, etc.)
    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "authorization": authorization
    }

    # Define the payload with the dataset name
    payload = {
        "name": name
    }

    # Make the POST request to create a dataset
    response = requests.post(url, json=payload, headers=headers)
    # print("Dataset creation response:", response.json()) # Print the response for debugging

    # Check if the request was successful and extract the dataset ID
    if response.status_code == 200 and 'insert_datasets_one' in response.json():
        dataset_id = response.json()['insert_datasets_one']['id']
        print("Dataset has been created, its ID is:", dataset_id)
        return dataset_id
    else:
        print(f"Failed to create dataset. Status code: {response.status_code}")
        return None

dataset_id = create_user_dataset("test_user_dataset", "70b3c9df-bffb-417e-bb36-1738432c54cc", describe_user)

print(dataset_id)

# Print the final number of images in the dataset
num_images = get_number_of_images_in_dataset(dataset_id)
print(f"Total images in dataset {dataset_id}: {num_images}")

# display all the images
display_all_images_in_dataset(dataset_id)

"""
Function to get the the dataset.
"""
def train_user_model(user_model_name, dataset_id):

    url = "https://cloud.leonardo.ai/api/rest/v1/models"

    # Define the headers, make sure to include authorization if required
    headers = {
      "accept": "application/json",
      "content-type": "application/json",
      "authorization": authorization
    }

    payload = {
      "modelType": "CHARACTERS",
      "nsfw": False,
      "resolution": 512,
      "strength": "MEDIUM",
      "datasetId": dataset_id,
      "instance_prompt": "3D Disney Pixar-style animation character",
      "name": user_model_name
    }

    response = requests.post(url, json=payload, headers=headers)

    # Check if the request was successful
    if response.status_code == 200:
        print(formatJson(response))
        response_data = response.json()
        sd_training_job = response_data.get('sdTrainingJob')
        if sd_training_job and sd_training_job.get('customModelId'):
            user_model_id = sd_training_job['customModelId']
            return user_model_id
    else:
        print(f"Failed to train the user model. Status code: {response.status_code}")
        return None

user_model_id = train_user_model("test_user_model", dataset_id)

# Pipeline

# Step 1：根据prompt生成一张用户图像 （之后这一步变成生成多张，并让用户自己选择一张最喜欢的；并允许图生图）

# Step 2：根据这张图像生成另外9张相似角色图，构成一个10张图的小dataset
# "When training a custom model with Leonardo AI, you can use a small set of images, typically between 8-20, to refine a model."

# Step 3：用这个小dataset去train a custom model for user character

# Step 4： 从识别到的日记文字生成出prompts，可以考虑用OpenAI的api来做（之后可能需要内容切割成多个prompts，现在初版可以先不管）

# Step 5：用prompt和之前训练好的model来生成出日记图像

# 可供参考的资料
# Leonardo API文档：https://docs.leonardo.ai/reference/